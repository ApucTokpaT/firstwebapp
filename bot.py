from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo, constants # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è ParseMode
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import json
import logging
import html # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è HTML

# --- –ù–ê–°–¢–†–û–ô–ö–ò ---
# !!! –í–ê–ñ–ù–û: –í—Å—Ç–∞–≤—å—Ç–µ —Å—é–¥–∞ –í–ê–® —Ä–µ–∞–ª—å–Ω—ã–π API —Ç–æ–∫–µ–Ω –æ—Ç @BotFather !!!
BOT_TOKEN = "7588965175:AAEorKSyas6prFbVf01hf83vLbHsci75p9s" # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–∞—à —Ç–æ–∫–µ–Ω
# !!! –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ URL —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Ç–µ–º, —á—Ç–æ –≤—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏ –≤ @BotFather !!!
WEB_APP_URL = "https://ApucTokpaT.github.io/firstwebapp/" # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–∞—à URL
# ----------------

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logging.getLogger("httpx").setLevel(logging.WARNING)
logging.getLogger("telegram.ext").setLevel(logging.WARNING)
logger = logging.getLogger(__name__)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π Web App."""
    user = update.effective_user
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id} ({user.username})")
    keyboard = [
        [InlineKeyboardButton("üìù –û—Ç–∫—Ä—ã—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á", web_app=WebAppInfo(url=WEB_APP_URL))]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        f'–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á:',
        reply_markup=reply_markup
    )

async def handle_web_app_data(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ, –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –æ—Ç Web App."""
    if not (update.message and update.message.web_app_data):
        logger.warning("–ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π update –≤ handle_web_app_data, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º.")
        return

    user_id = update.effective_user.id
    chat_id = update.effective_chat.id
    data_str = update.message.web_app_data.data
    logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ—Ç Web App (User ID: {user_id}, Chat ID: {chat_id}): {data_str}")

    try:
        data_obj = json.loads(data_str)
        action = data_obj.get("action")

        if action == "send_tasks_to_user":
            tasks = data_obj.get("tasks", [])
            logger.info(f"–î–µ–π—Å—Ç–≤–∏–µ '{action}'. –ó–∞–¥–∞—á–∏: {tasks}")

            if tasks:
                # --- –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏ ---
                message_text = "<b>–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á:</b>\n\n"
                for i, task in enumerate(tasks, 1):
                    safe_task = html.escape(task)
                    message_text += f"{i}. {safe_task}\n"
                # ------------------------------------------

                await context.bot.send_message(
                    chat_id=chat_id,
                    text=message_text,
                    parse_mode=constants.ParseMode.HTML
                )
                logger.info(f"–ó–∞–¥–∞—á–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–π –ø–µ—Ä–µ—Å—ã–ª–∫–∏")
            else:
                await context.bot.send_message(
                    chat_id=chat_id,
                    text="–ò–∑ Web App –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á."
                )
                logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

        else:
            logger.warning(f"–ü–æ–ª—É—á–µ–Ω–æ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ '{action}' –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            await context.bot.send_message(
                chat_id=chat_id,
                text=f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ—Ç Web App —Å –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–º –¥–µ–π—Å—Ç–≤–∏–µ–º: '{action}'"
            )

    except json.JSONDecodeError:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON –æ—Ç Web App (User ID: {user_id}): {data_str}")
        await context.bot.send_message(
            chat_id=chat_id,
            text="üôÅ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç Web App (–Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON)."
        )
    except Exception as e:
        logger.exception(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç Web App (User ID: {user_id}): {e}")
        await context.bot.send_message(
            chat_id=chat_id,
            text="üôÅ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞."
        )

def main() -> None:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–∞—à —Ç–æ–∫–µ–Ω
    if BOT_TOKEN == "–í–ê–®_–ë–û–¢_–¢–û–ö–ï–ù": # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π —Ç–æ–∫–µ–Ω
         logger.error("–û–®–ò–ë–ö–ê: –ù–µ —É–∫–∞–∑–∞–Ω BOT_TOKEN! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à API —Ç–æ–∫–µ–Ω.")
         return

    application = Application.builder().token(BOT_TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.StatusUpdate.WEB_APP_DATA, handle_web_app_data))

    logger.info("–ë–æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π...")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main()