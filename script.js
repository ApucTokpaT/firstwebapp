"use strict";

const tg = window.Telegram.WebApp;
const STORAGE_KEY = 'todoAppTasks_v2'; // –ù–æ–≤—ã–π –∫–ª—é—á, —á—Ç–æ–±—ã –Ω–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤–∞—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏

// --- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ---
let tasks = []; // –ú–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ –∑–∞–¥–∞—á
let editingId = null; // ID –∑–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä–∞—è —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç—Å—è
let currentFilter = 'all'; // –¢–µ–∫—É—â–∏–π —Ñ–∏–ª—å—Ç—Ä ('all', 'active', 'completed')

// --- –§—É–Ω–∫—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–µ–º—ã (–∫–∞–∫ –±—ã–ª–∞) ---
function setThemeClass() { /* ... –∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ... */
    console.log("setThemeClass called. Scheme:", tg.colorScheme);
    try {
        const root = document.documentElement;
        const themeParams = tg.themeParams;
        const hexToRgb = (hex) => {
             if (!hex || typeof hex !== 'string') return null;
             const result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
             return result ? `${parseInt(result[1], 16)}, ${parseInt(result[2], 16)}, ${parseInt(result[3], 16)}` : null;
        };
        const defaults = { dark: { hint: '#adb5bd', link: '#7aaaff', button: '#3a86ff', button_text: '#ffffff', secondary_bg: 'rgba(40, 48, 56, 0.9)' } };
        const currentDefaults = defaults.dark;
        const params = themeParams || {};
        root.style.setProperty('--tg-theme-hint-color', params.hint_color || currentDefaults.hint);
        root.style.setProperty('--tg-theme-link-color', params.link_color || currentDefaults.link);
        root.style.setProperty('--tg-theme-button-color', params.button_color || currentDefaults.button);
        root.style.setProperty('--tg-theme-button-text-color', params.button_text_color || currentDefaults.button_text);
        root.style.setProperty('--tg-theme-secondary-bg-color', params.secondary_bg_color ? `rgba(${hexToRgb(params.secondary_bg_color)}, 0.9)` : currentDefaults.secondary_bg);
        root.style.setProperty('--tg-theme-hint-color-rgb', hexToRgb(params.hint_color || currentDefaults.hint) || '173, 181, 189');
        root.style.setProperty('--tg-theme-button-color-rgb', hexToRgb(params.button_color || currentDefaults.button) || '58, 134, 255');
        root.style.setProperty('--tg-theme-secondary-bg-color-value', hexToRgb(params.secondary_bg_color) || '40, 48, 56'); // –ò—Å–ø–æ–ª—å–∑—É–µ–º RGB –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è rgba()
        document.body.classList.toggle('dark', true);
    } catch (e) { console.error("Error in setThemeClass:", e); }
}

// --- –§—É–Ω–∫—Ü–∏–∏ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è/–ó–∞–≥—Ä—É–∑–∫–∏ ---
function loadTasks() {
    console.log("Loading tasks...");
    const savedTasks = localStorage.getItem(STORAGE_KEY);
    if (savedTasks) {
        try {
            // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —ç—Ç–æ –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ —Å id –∏ text
            const parsed = JSON.parse(savedTasks);
            if (Array.isArray(parsed) && parsed.every(item => typeof item === 'object' && item !== null && 'id' in item && 'text' in item)) {
                 tasks = parsed;
                 console.log("Tasks loaded:", tasks.length);
            } else {
                console.warn("Invalid data format in localStorage, starting fresh.");
                tasks = [];
                localStorage.removeItem(STORAGE_KEY);
            }
        } catch (e) {
            console.error("Error parsing tasks:", e);
            tasks = [];
            localStorage.removeItem(STORAGE_KEY);
        }
    } else {
        tasks = [];
        console.log("No saved tasks found.");
    }
}
function saveTasks() {
    console.log("Saving tasks...");
    try {
        localStorage.setItem(STORAGE_KEY, JSON.stringify(tasks));
        console.log("Tasks saved.");
    } catch (e) {
        console.error("Error saving tasks:", e);
        try { tg.showAlert("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–¥–∞—á–∏."); } catch (ae) {}
    }
}

// --- –•–µ–ª–ø–µ—Ä—ã ---
function generateId() { return Date.now() + Math.random(); }
function formatDate(isoString) {
    if (!isoString) return null;
    try {
        const date = new Date(isoString);
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –¥–∞—Ç—ã
        if (isNaN(date.getTime())) return null;
        return date.toLocaleDateString('ru-RU', { year: 'numeric', month: 'short', day: 'numeric' });
    } catch (e) {
        console.error("Error formatting date:", isoString, e);
        return null;
    }
}
function parseTags(tagsString) {
    if (!tagsString || typeof tagsString !== 'string') return [];
    return tagsString.split(',')
        .map(tag => tag.trim()) // –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã
        .filter(tag => tag !== ''); // –£–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ —Ç–µ–≥–∏
}
function tagsToString(tagsArray) {
     if (!Array.isArray(tagsArray)) return '';
     return tagsArray.join(', ');
}

// --- –†–µ–Ω–¥–µ—Ä –∏ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è ---
function renderTasks() {
    console.log(`Rendering tasks with filter: ${currentFilter}`);
    const taskList = document.getElementById('task-list');
    if (!taskList) return;

    // –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–¥–∞—á–∏
    const filteredTasks = tasks.filter(task => {
        if (currentFilter === 'all') return true;
        if (currentFilter === 'active') return !task.completed;
        if (currentFilter === 'completed') return task.completed;
        return true; // –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
    });

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫
    updateTaskCounter();
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º/—Å–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –æ—á–∏—Å—Ç–∫–∏
    toggleClearCompletedButton();

    taskList.innerHTML = ''; // –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫

    if (filteredTasks.length === 0) {
        const noTasksLi = document.createElement('li');
        noTasksLi.className = 'no-tasks';
        noTasksLi.textContent = currentFilter === 'all' ? '–ó–∞–¥–∞—á –ø–æ–∫–∞ –Ω–µ—Ç...' :
                                currentFilter === 'active' ? '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á.' :
                                '–ù–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á.';
        taskList.appendChild(noTasksLi);
        setTimeout(() => { noTasksLi.classList.add('visible'); }, 10);
        return;
    }

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —Å–Ω–∞—á–∞–ª–∞, –ø–æ—Ç–æ–º –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è)
    filteredTasks.sort((a, b) => {
        if (a.completed !== b.completed) {
            return a.completed ? 1 : -1; // –ù–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –≤—ã—à–µ
        }
        // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É –∏–ª–∏ –¥–∞—Ç–µ
        return new Date(b.createdAt) - new Date(a.createdAt); // –ù–æ–≤—ã–µ –≤—ã—à–µ
    });

    filteredTasks.forEach((task) => {
        try {
            const listItem = document.createElement('li');
            listItem.dataset.id = task.id; // –ò—Å–ø–æ–ª—å–∑—É–µ–º ID
            listItem.classList.toggle('completed', task.completed);

            // –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∑–∞–¥–∞—á–∏
            const itemContent = document.createElement('div');
            itemContent.className = 'task-item-content';

            // –ß–µ–∫–±–æ–∫—Å
            const checkbox = document.createElement('input');
            checkbox.type = 'checkbox';
            checkbox.className = 'task-checkbox';
            checkbox.checked = task.completed;
            checkbox.dataset.id = task.id; // ID –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞

            // –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –¥–µ—Ç–∞–ª–µ–π (—Ç–µ–∫—Å—Ç, –º–µ—Ç–∞, —Ç–µ–≥–∏)
            const detailsDiv = document.createElement('div');
            detailsDiv.className = 'task-details';

            // –¢–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏
            const textSpan = document.createElement('span');
            textSpan.className = 'task-text';
            textSpan.textContent = task.text;

            // –ú–µ—Ç–∞-–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç, –¥–∞—Ç–∞)
            const metaDiv = document.createElement('div');
            metaDiv.className = 'task-meta';

            // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç
            if (task.priority) {
                const prioritySpan = document.createElement('span');
                prioritySpan.className = `task-priority ${task.priority}`;
                prioritySpan.textContent = { high: '–í—ã—Å–æ–∫–∏–π üî•', medium: '–°—Ä–µ–¥–Ω–∏–π ‚ú®', low: '–ù–∏–∑–∫–∏–π üí§' }[task.priority] || task.priority;
                metaDiv.appendChild(prioritySpan);
            }

            // –î–∞—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            const formattedDate = formatDate(task.dueDate);
            if (formattedDate) {
                const dateSpan = document.createElement('span');
                dateSpan.className = 'task-due-date';
                dateSpan.textContent = `–°—Ä–æ–∫: ${formattedDate}`;
                // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–æ—Å—Ç—å
                const today = new Date(); today.setHours(0,0,0,0); // –°–µ–≥–æ–¥–Ω—è—à–Ω—è—è –¥–∞—Ç–∞ –±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏
                const dueDate = new Date(task.dueDate);
                if (!isNaN(dueDate.getTime()) && dueDate < today && !task.completed) {
                     dateSpan.classList.add('overdue');
                     dateSpan.textContent += ' (–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ!)';
                }
                metaDiv.appendChild(dateSpan);
            }

            // –¢–µ–≥–∏
            const tagsDiv = document.createElement('div');
            tagsDiv.className = 'task-tags';
            if (task.tags && task.tags.length > 0) {
                task.tags.forEach(tagText => {
                    const tagSpan = document.createElement('span');
                    tagSpan.className = 'tag';
                    tagSpan.textContent = tagText;
                    tagsDiv.appendChild(tagSpan);
                });
            }

            // –°–æ–±–∏—Ä–∞–µ–º –¥–µ—Ç–∞–ª–∏
            detailsDiv.appendChild(textSpan);
            if(metaDiv.hasChildNodes()) detailsDiv.appendChild(metaDiv); // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç—É, –µ—Å–ª–∏ –µ—Å—Ç—å
            if(tagsDiv.hasChildNodes()) detailsDiv.appendChild(tagsDiv); // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–≥–∏, –µ—Å–ª–∏ –µ—Å—Ç—å

            // –°–æ–±–∏—Ä–∞–µ–º –ª–µ–≤—É—é —á–∞—Å—Ç—å (—á–µ–∫–±–æ–∫—Å + –¥–µ—Ç–∞–ª–∏)
            itemContent.appendChild(checkbox);
            itemContent.appendChild(detailsDiv);

            // --- –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π (Edit/Delete) ---
            const actionsDiv = document.createElement('div');
            actionsDiv.className = 'task-actions';
            const editBtn = document.createElement('button'); editBtn.className = 'edit-btn'; editBtn.innerHTML = '‚úèÔ∏è'; editBtn.setAttribute('aria-label', '–ò–∑–º–µ–Ω–∏—Ç—å'); editBtn.dataset.id = task.id;
            const deleteBtn = document.createElement('button'); deleteBtn.className = 'delete-btn'; deleteBtn.innerHTML = 'üóëÔ∏è'; deleteBtn.setAttribute('aria-label', '–£–¥–∞–ª–∏—Ç—å'); deleteBtn.dataset.id = task.id;
            actionsDiv.appendChild(editBtn); actionsDiv.appendChild(deleteBtn);

            // –°–æ–±–∏—Ä–∞–µ–º –≤–µ—Å—å LI
            listItem.appendChild(itemContent);
            listItem.appendChild(actionsDiv);
            taskList.appendChild(listItem);

            // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
            requestAnimationFrame(() => { // –î–∞–µ–º –±—Ä–∞—É–∑–µ—Ä—É –æ—Ç—Ä–∏—Å–æ–≤–∞—Ç—å —ç–ª–µ–º–µ–Ω—Ç –ø–µ—Ä–µ–¥ –∞–Ω–∏–º–∞—Ü–∏–µ–π
                 listItem.classList.add('visible');
            });

        } catch (e) { console.error(`Error rendering task id ${task.id}:`, e); }
    });
    console.log("Rendering finished.");
}

function updateTaskCounter() {
    const counterElement = document.getElementById('task-counter');
    if (!counterElement) return;
    const activeTasks = tasks.filter(task => !task.completed).length;
    counterElement.textContent = `–ê–∫—Ç–∏–≤–Ω—ã—Ö: ${activeTasks} / –í—Å–µ–≥–æ: ${tasks.length}`;
}

function toggleClearCompletedButton() {
    const clearBtn = document.getElementById('clear-completed-btn');
    if(!clearBtn) return;
    const hasCompleted = tasks.some(task => task.completed);
    clearBtn.style.display = hasCompleted ? 'block' : 'none'; // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ
}


// --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –î–µ–π—Å—Ç–≤–∏–π —Å –ó–∞–¥–∞—á–∞–º–∏ ---
function addTask() {
    const taskInput = document.getElementById('new-task-input');
    const prioritySelect = document.getElementById('priority-select');
    const dateInput = document.getElementById('due-date-input');
    const tagsInput = document.getElementById('tags-input');
    const addTaskBtn = document.getElementById('add-task-btn');
    const cancelEditBtn = document.getElementById('cancel-edit-btn');

    if (!taskInput || !prioritySelect || !dateInput || !tagsInput || !addTaskBtn || !cancelEditBtn) return;

    const taskText = taskInput.value.trim();
    if (taskText === "") {
        tg.HapticFeedback.notificationOccurred('warning');
        tg.showAlert("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏!");
        taskInput.focus();
        return;
    }

    const newTask = {
        id: editingId ? editingId : generateId(), // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–π ID –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
        text: taskText,
        completed: editingId ? tasks.find(t=>t.id === editingId)?.completed || false : false, // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–∏ —Ä–µ–¥.
        priority: prioritySelect.value || 'medium',
        dueDate: dateInput.value || null, // –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ —Å—Ç–∞–Ω–µ—Ç null
        tags: parseTags(tagsInput.value),
        createdAt: editingId ? tasks.find(t=>t.id === editingId)?.createdAt || new Date().toISOString() : new Date().toISOString()
    };

    try {
        if (editingId) { // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
            const index = tasks.findIndex(t => t.id === editingId);
            if (index > -1) {
                tasks[index] = newTask;
            } else { // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ ID (—Å—Ç—Ä–∞–Ω–Ω–æ), –¥–æ–±–∞–≤–∏–º –∫–∞–∫ –Ω–æ–≤—É—é
                 tasks.push(newTask);
            }
            console.log("Task updated:", newTask.id);
        } else { // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ
            tasks.push(newTask);
            console.log("Task added:", newTask.id);
        }

        saveTasks();
        cancelEdit(); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –∏ —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        renderTasks();
        tg.HapticFeedback.impactOccurred(editingId ? 'medium' : 'light');

    } catch (e) {
        console.error("Error adding/updating task:", e);
        tg.showAlert("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏.");
    }
}

function startEditTask(id) {
    const task = tasks.find(t => t.id === id);
    if (!task) {
        console.error("Task not found for editing:", id);
        return;
    }

    // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É –¥–∞–Ω–Ω—ã–º–∏ –∑–∞–¥–∞—á–∏
    document.getElementById('new-task-input').value = task.text;
    document.getElementById('priority-select').value = task.priority || 'medium';
    document.getElementById('due-date-input').value = task.dueDate || '';
    document.getElementById('tags-input').value = tagsToString(task.tags);

    editingId = id; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º ID —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–æ–π –∑–∞–¥–∞—á–∏

    // –ú–µ–Ω—è–µ–º –∫–Ω–æ–ø–∫—É –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
    document.getElementById('add-task-btn').textContent = '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å';
    document.getElementById('cancel-edit-btn').style.display = 'block';

    document.getElementById('new-task-input').focus();
    tg.HapticFeedback.impactOccurred('medium');
}

function deleteTask(id) {
    const taskIndex = tasks.findIndex(t => t.id === id);
    if (taskIndex === -1) {
        console.error("Task not found for deletion:", id);
        return;
    }
    const task = tasks[taskIndex];

    tg.showConfirm(`–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É:\n"${task.text}"?`, (confirmed) => {
        if (confirmed) {
            // –ê–Ω–∏–º–∞—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è
            const listItem = document.querySelector(`#task-list li[data-id="${id}"]`);
            if (listItem) {
                listItem.classList.add('removing'); // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –¥–ª—è CSS –∞–Ω–∏–º–∞—Ü–∏–∏
                // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏ –ø–µ—Ä–µ–¥ —Ä–µ–∞–ª—å–Ω—ã–º —É–¥–∞–ª–µ–Ω–∏–µ–º
                listItem.addEventListener('animationend', () => {
                    performDeletion(id);
                }, { once: true }); // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç –æ–¥–∏–Ω —Ä–∞–∑
            } else {
                 performDeletion(id); // –ï—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, —É–¥–∞–ª—è–µ–º —Å—Ä–∞–∑—É
            }
        } else { tg.HapticFeedback.impactOccurred('light'); }
    });
}

function performDeletion(id) {
     const initialLength = tasks.length;
     tasks = tasks.filter(t => t.id !== id); // –£–¥–∞–ª—è–µ–º –∏–∑ –º–∞—Å—Å–∏–≤–∞

     if (tasks.length < initialLength) { // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —á—Ç–æ-—Ç–æ —É–¥–∞–ª–∏–ª–∏
         if (editingId === id) cancelEdit(); // –û—Ç–º–µ–Ω—è–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, –µ—Å–ª–∏ —É–¥–∞–ª–∏–ª–∏ —ç—Ç—É –∑–∞–¥–∞—á—É
         saveTasks();
         renderTasks(); // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫
         tg.HapticFeedback.notificationOccurred('success');
         console.log("Task deleted:", id);
     }
}


function toggleComplete(id) {
    const taskIndex = tasks.findIndex(t => t.id === id);
    if (taskIndex > -1) {
        tasks[taskIndex].completed = !tasks[taskIndex].completed;
        console.log(`Task ${id} completion toggled to: ${tasks[taskIndex].completed}`);
        saveTasks();
        // –ù–µ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –≤–µ—Å—å —Å–ø–∏—Å–æ–∫, –∞ —Ç–æ–ª—å–∫–æ –º–µ–Ω—è–µ–º –∫–ª–∞—Å—Å —É LI
        const listItem = document.querySelector(`#task-list li[data-id="${id}"]`);
        if (listItem) {
            listItem.classList.toggle('completed', tasks[taskIndex].completed);
            // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∏ –∫–Ω–æ–ø–∫—É –æ—á–∏—Å—Ç–∫–∏, —Ç.–∫. —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–∏–ª—Å—è
            updateTaskCounter();
            toggleClearCompletedButton();
        } else {
            renderTasks(); // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤–∞—Ç—å –≤—Å–µ, –µ—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω
        }
        tg.HapticFeedback.impactOccurred('light');
    } else {
        console.error("Task not found for toggle:", id);
    }
}

function cancelEdit() {
    editingId = null;
    document.getElementById('new-task-input').value = '';
    document.getElementById('priority-select').value = 'medium';
    document.getElementById('due-date-input').value = '';
    document.getElementById('tags-input').value = '';
    document.getElementById('add-task-btn').textContent = '–î–æ–±–∞–≤–∏—Ç—å';
    document.getElementById('cancel-edit-btn').style.display = 'none';
    console.log("Edit cancelled.");
}

function clearCompletedTasks() {
    const completedCount = tasks.filter(t => t.completed).length;
    if (completedCount === 0) {
        tg.showAlert("–ù–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –¥–ª—è –æ—á–∏—Å—Ç–∫–∏.");
        return;
    }

    tg.showConfirm(`–£–¥–∞–ª–∏—Ç—å ${completedCount} –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á?`, (confirmed) => {
        if (confirmed) {
            tasks = tasks.filter(task => !task.completed);
            saveTasks();
            renderTasks();
            tg.HapticFeedback.notificationOccurred('success');
            console.log("Completed tasks cleared.");
        } else {
            tg.HapticFeedback.impactOccurred('light');
        }
    });
}


// --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
function initializeApp() {
    console.log("Initializing Advanced ToDo App...");

    // --- –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ ---
    const addTaskBtn = document.getElementById('add-task-btn');
    const newTaskInput = document.getElementById('new-task-input');
    const sendTasksBtn = document.getElementById('send-tasks-btn');
    const closeBtn = document.getElementById('close-btn');
    const taskListUl = document.getElementById('task-list');
    const userInfoDiv = document.getElementById('user-info');
    const filterButtons = document.querySelectorAll('.filters .filter-btn');
    const clearCompletedBtn = document.getElementById('clear-completed-btn');
    const cancelEditBtn = document.getElementById('cancel-edit-btn');

    // --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ ---
    if (!addTaskBtn || !newTaskInput || !sendTasksBtn || !closeBtn || !taskListUl || !userInfoDiv || !filterButtons.length || !clearCompletedBtn || !cancelEditBtn) {
        console.error("Critical element(s) not found! Aborting.");
        document.body.innerHTML = '<div style="color: #ff7b7b; padding: 20px; text-align: center;">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.</div>';
        try { tg.showAlert("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞."); } catch (e) {}
        return;
    }
    console.log("All critical elements found.");

    // --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–º—ã –∏ TG API ---
    try { setThemeClass(); tg.onEvent('themeChanged', setThemeClass); tg.expand(); tg.ready(); }
    catch (e) { console.error("Error initializing Telegram SDK:", e); }

    // --- –ò–Ω—Ñ–æ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ ---
    try { /* ... –∫–æ–¥ user info ... */
        if (tg.initDataUnsafe && tg.initDataUnsafe.user) { const user = tg.initDataUnsafe.user; userInfoDiv.innerHTML = `–ó–∞–¥–∞—á–∏ –¥–ª—è: <strong>${user.first_name || 'User'}</strong>`; } else { userInfoDiv.innerHTML = '–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã'; }
    } catch(e) { console.error("Error displaying user info:", e); }

    // --- –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –†–µ–Ω–¥–µ—Ä –ó–∞–¥–∞—á ---
    loadTasks();
    renderTasks(); // –ü–µ—Ä–≤—ã–π —Ä–µ–Ω–¥–µ—Ä

    // --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –°–æ–±—ã—Ç–∏–π ---
    try {
        // –§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        addTaskBtn.addEventListener('click', addTask);
        newTaskInput.addEventListener('keypress', (event) => { if (event.key === 'Enter') { event.preventDefault(); addTask(); } });
        cancelEditBtn.addEventListener('click', cancelEdit);

        // –î–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á (—á–µ–∫–±–æ–∫—Å, edit, delete)
        taskListUl.addEventListener('click', (event) => {
            const target = event.target;
            const listItem = target.closest('li[data-id]');
            if (!listItem) return; // –ö–ª–∏–∫ –Ω–µ –ø–æ —ç–ª–µ–º–µ–Ω—Ç—É —Å–ø–∏—Å–∫–∞

            const taskId = Number(listItem.dataset.id); // –ü–æ–ª—É—á–∞–µ–º ID –∏–∑ LI
            if (isNaN(taskId)) return;

            // –ö–ª–∏–∫ –ø–æ —á–µ–∫–±–æ–∫—Å—É
            if (target.matches('.task-checkbox')) {
                 console.log("Checkbox clicked for task:", taskId);
                 toggleComplete(taskId);
                 return; // –í–∞–∂–Ω–æ, —á—Ç–æ–±—ã –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏ –¥—Ä—É–≥–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            }
            // –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ Edit
            if (target.closest('.edit-btn')) {
                console.log("Edit button clicked for task:", taskId);
                startEditTask(taskId);
                return;
            }
            // –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ Delete
            if (target.closest('.delete-btn')) {
                console.log("Delete button clicked for task:", taskId);
                deleteTask(taskId);
                return;
            }
        });

        // –§–∏–ª—å—Ç—Ä—ã
        filterButtons.forEach(button => {
            button.addEventListener('click', () => {
                currentFilter = button.dataset.filter;
                // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∫–Ω–æ–ø–∫—É
                filterButtons.forEach(btn => btn.classList.remove('active'));
                button.classList.add('active');
                renderTasks(); // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Å –Ω–æ–≤—ã–º —Ñ–∏–ª—å—Ç—Ä–æ–º
            });
        });

        // –û—á–∏—Å—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö
        clearCompletedBtn.addEventListener('click', clearCompletedTasks);

        // –û—Ç–ø—Ä–∞–≤–∫–∞ –±–æ—Ç—É
        sendTasksBtn.addEventListener('click', () => { /* ... –∫–æ–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ... */
             if (tasks.length === 0) { tg.HapticFeedback.notificationOccurred('warning'); tg.showAlert("–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø—É—Å—Ç."); return; }
             if (editingId !== null) cancelEdit();
             const dataToSend = JSON.stringify({ action: "send_tasks_to_user", tasks: tasks, timestamp: new Date().toISOString() });
             console.log("Sending data to bot for forwarding:", dataToSend);
             try { tg.sendData(dataToSend); tg.HapticFeedback.notificationOccurred('success'); tg.showAlert("–ó–∞–¥–∞—á–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –±–æ—Ç—É –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –≤–∞–º!");
             } catch (e) { console.error("Error sending data:", e); tg.showAlert("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –±–æ—Ç—É."); }
        });

        // –ó–∞–∫—Ä—ã—Ç–∏–µ
        closeBtn.addEventListener('click', () => { if (editingId !== null) cancelEdit(); try { tg.close(); } catch (e) {} });

        console.log("Event listeners added.");

    } catch (e) { console.error("Error adding event listeners:", e); tg.showAlert("–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞."); }
}

// --- –ó–∞–ø—É—Å–∫ ---
if (document.readyState === 'loading') { document.addEventListener('DOMContentLoaded', initializeApp); } else { initializeApp(); }