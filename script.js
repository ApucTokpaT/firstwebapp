"use strict";

const tg = window.Telegram.WebApp;

// --- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ---
let tasks = [];
let editingIndex = null; // –ò–Ω–¥–µ–∫—Å –∑–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä–∞—è —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç—Å—è, null - –µ—Å–ª–∏ –Ω–∏–∫–∞–∫–∞—è

// --- –§—É–Ω–∫—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–µ–º—ã ---
function setThemeClass() {
    console.log("setThemeClass called. Scheme:", tg.colorScheme);
    try {
        const root = document.documentElement;
        const themeParams = tg.themeParams;
        const hexToRgb = (hex) => {
             if (!hex || typeof hex !== 'string') return null;
             const result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
             return result ? `${parseInt(result[1], 16)}, ${parseInt(result[2], 16)}, ${parseInt(result[3], 16)}` : null;
        };
        const defaults = {
             light: { bg: '#ffffff', text: '#212529', hint: '#6c757d', link: '#0d6efd', button: '#0d6efd', button_text: '#ffffff', secondary_bg: '#f8f9fa' },
             dark: { bg: '#181e25', text: '#ffffff', hint: '#a5acb5', link: '#6ea8fe', button: '#2e7ddb', button_text: '#ffffff', secondary_bg: '#212831' }
        };
        const scheme = tg.colorScheme || 'light';
        const currentDefaults = defaults[scheme];
        const params = themeParams || {};

        root.style.setProperty('--tg-theme-bg-color', params.bg_color || currentDefaults.bg);
        root.style.setProperty('--tg-theme-text-color', params.text_color || currentDefaults.text);
        root.style.setProperty('--tg-theme-hint-color', params.hint_color || currentDefaults.hint);
        root.style.setProperty('--tg-theme-link-color', params.link_color || currentDefaults.link);
        root.style.setProperty('--tg-theme-button-color', params.button_color || currentDefaults.button);
        root.style.setProperty('--tg-theme-button-text-color', params.button_text_color || currentDefaults.button_text);
        root.style.setProperty('--tg-theme-secondary-bg-color', params.secondary_bg_color || currentDefaults.secondary_bg);
        root.style.setProperty('--tg-theme-bg-color-rgb', hexToRgb(params.bg_color || currentDefaults.bg) || (scheme === 'dark' ? '24, 30, 37' : '255, 255, 255'));
        root.style.setProperty('--tg-theme-text-color-rgb', hexToRgb(params.text_color || currentDefaults.text) || (scheme === 'dark' ? '255, 255, 255' : '33, 37, 41'));
        root.style.setProperty('--tg-theme-hint-color-rgb', hexToRgb(params.hint_color || currentDefaults.hint) || (scheme === 'dark' ? '165, 172, 181' : '108, 117, 125'));
        root.style.setProperty('--tg-theme-button-color-rgb', hexToRgb(params.button_color || currentDefaults.button) || (scheme === 'dark' ? '46, 125, 219' : '13, 110, 253'));
        root.style.setProperty('--tg-theme-secondary-bg-color-rgb', hexToRgb(params.secondary_bg_color || currentDefaults.secondary_bg) || (scheme === 'dark' ? '33, 40, 49' : '248, 249, 250'));

        document.body.classList.toggle('dark', scheme === 'dark');
    } catch (e) {
        console.error("Error in setThemeClass:", e);
    }
}

// --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å–ø–∏—Å–∫–æ–º –∑–∞–¥–∞—á ---

// –†–µ–Ω–¥–µ—Ä —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á
function renderTasks() {
    console.log("renderTasks called. Tasks:", tasks);
    const taskList = document.getElementById('task-list');
    const addTaskBtn = document.getElementById('add-task-btn');
    if (!taskList || !addTaskBtn) {
        console.error("renderTasks Error: Critical elements not found!");
        return;
    }
    taskList.innerHTML = ''; // –û—á–∏—â–∞–µ–º

    if (editingIndex !== null) {
        cancelEdit();
    }

    if (tasks.length === 0) {
        const noTasksLi = document.createElement('li');
        noTasksLi.className = 'no-tasks';
        noTasksLi.textContent = '–ü–æ–∫–∞ –∑–∞–¥–∞—á –Ω–µ—Ç...';
        taskList.appendChild(noTasksLi);
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç "–Ω–µ—Ç –∑–∞–¥–∞—á"
        setTimeout(() => { noTasksLi.classList.add('visible'); }, 10);
        return;
    }

    tasks.forEach((taskText, index) => {
        try {
            const listItem = document.createElement('li');
            listItem.dataset.index = index;

            const textSpan = document.createElement('span');
            textSpan.className = 'task-text';
            textSpan.textContent = taskText;

            const actionsDiv = document.createElement('div');
            actionsDiv.className = 'task-actions';

            const editBtn = document.createElement('button');
            editBtn.className = 'edit-btn';
            editBtn.innerHTML = '‚úèÔ∏è';
            editBtn.setAttribute('aria-label', '–ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞—á—É');
            editBtn.dataset.index = index;

            const deleteBtn = document.createElement('button');
            deleteBtn.className = 'delete-btn';
            deleteBtn.innerHTML = 'üóëÔ∏è';
            deleteBtn.setAttribute('aria-label', '–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É');
            deleteBtn.dataset.index = index;

            actionsDiv.appendChild(editBtn);
            actionsDiv.appendChild(deleteBtn);

            listItem.appendChild(textSpan);
            listItem.appendChild(actionsDiv);
            taskList.appendChild(listItem);

            setTimeout(() => {
                listItem.classList.add('visible');
            }, 10 * index); // –ö–∞—Å–∫–∞–¥–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è

        } catch (e) {
            console.error(`Error rendering task ${index}:`, e);
        }
    });
    console.log("renderTasks finished.");
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
function addTask() {
    console.log("addTask function called. Editing index:", editingIndex);
    const input = document.getElementById('new-task-input');
    const addTaskBtn = document.getElementById('add-task-btn');
    if (!input || !addTaskBtn) {
        console.error("addTask Error: Input or Add button not found!");
        tg.showAlert("–û—à–∏–±–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞.");
        return;
    }

    try {
        const taskText = input.value.trim();
        console.log("Task text from input:", taskText);

        if (taskText === "") {
            tg.HapticFeedback.notificationOccurred('warning');
            tg.showAlert("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏!");
            input.focus();
            return;
        }

        if (editingIndex !== null) {
            console.log(`Saving changes for task at index ${editingIndex}`);
            tasks[editingIndex] = taskText;
            editingIndex = null;
            addTaskBtn.textContent = '–î–æ–±–∞–≤–∏—Ç—å';
            input.value = '';
            renderTasks();
            tg.HapticFeedback.notificationOccurred('success');
        } else {
            console.log("Adding new task.");
            tasks.push(taskText);
            input.value = '';
            renderTasks();
            tg.HapticFeedback.impactOccurred('light');
            // input.focus(); // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
        }
    } catch (e) {
        console.error("Error in addTask/saveTask:", e);
        tg.showAlert("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏.");
        cancelEdit();
    }
}

// –ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
function startEditTask(index) {
    console.log(`Starting edit for task index: ${index}`);
    const input = document.getElementById('new-task-input');
    const addTaskBtn = document.getElementById('add-task-btn');
    if (!input || !addTaskBtn || tasks[index] === undefined) {
        console.error("startEditTask Error: Elements not found or index out of bounds.");
        return;
    }

    if (editingIndex !== null && editingIndex !== index) {
       cancelEdit();
    }

    try {
        input.value = tasks[index];
        addTaskBtn.textContent = '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å';
        editingIndex = index;
        input.focus();
        tg.HapticFeedback.impactOccurred('medium');
        // –ü–æ–¥—Å–≤–µ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        // document.querySelector(`#task-list li[data-index="${index}"]`)?.classList.add('editing');
    } catch (e) {
        console.error("Error in startEditTask:", e);
        tg.showAlert("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ.");
        cancelEdit();
    }
}

// –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
function deleteTask(index) {
    console.log(`Attempting to delete task index: ${index}`);
    if (tasks[index] === undefined) {
        console.error("deleteTask Error: Index out of bounds.");
        return;
    }

    try {
        tg.showConfirm(`–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É:\n"${tasks[index]}"?`, (confirmed) => {
            if (confirmed) {
                console.log(`Confirmed deletion for index: ${index}`);
                try {
                    tasks.splice(index, 1);
                    if (editingIndex === index) {
                        cancelEdit(); // –ï—Å–ª–∏ —É–¥–∞–ª—è–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—É—é, –æ—Ç–º–µ–Ω—è–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
                    } else {
                        renderTasks(); // –ò–Ω–∞—á–µ –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º
                    }
                    tg.HapticFeedback.notificationOccurred('success');
                } catch (e) {
                    console.error("Error during task deletion splice/render:", e);
                    tg.showAlert("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É.");
                }
            } else {
                console.log(`Deletion cancelled for index: ${index}`);
                tg.HapticFeedback.impactOccurred('light');
            }
        });
    } catch (e) {
        console.error("Error calling tg.showConfirm:", e);
        // –ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–∏—Ç—å –±–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤ –∫—Ä–∞–π–Ω–µ–º —Å–ª—É—á–∞–µ? –ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫—É
        tg.showAlert("–û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è.");
    }
}

// –û—Ç–º–µ–Ω–∞ —Ä–µ–∂–∏–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
function cancelEdit() {
    console.log("Cancelling edit mode.");
    const input = document.getElementById('new-task-input');
    const addTaskBtn = document.getElementById('add-task-btn');
    if (!input || !addTaskBtn) return;

    editingIndex = null;
    addTaskBtn.textContent = '–î–æ–±–∞–≤–∏—Ç—å';
    input.value = '';
    // –£–±–∏—Ä–∞–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É (–µ—Å–ª–∏ –¥–æ–±–∞–≤–ª—è–ª–∏)
    // document.querySelectorAll('#task-list li.editing').forEach(li => li.classList.remove('editing'));
}

// --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
function initializeApp() {
    console.log("initializeApp called.");

    const addTaskBtn = document.getElementById('add-task-btn');
    const newTaskInput = document.getElementById('new-task-input');
    const sendTasksBtn = document.getElementById('send-tasks-btn');
    const closeBtn = document.getElementById('close-btn');
    const taskListUl = document.getElementById('task-list');
    const userInfoDiv = document.getElementById('user-info');

    if (!addTaskBtn || !newTaskInput || !sendTasksBtn || !closeBtn || !taskListUl || !userInfoDiv) {
        console.error("Critical element(s) not found! Aborting initialization.");
        document.body.innerHTML = '<div style="color: red; padding: 20px; text-align: center;">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.</div>';
        try { tg.showAlert("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞."); } catch (e) {}
        return;
    }
    console.log("All critical elements found.");

    // --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–º—ã –∏ Telegram API ---
    try {
        setThemeClass();
        tg.onEvent('themeChanged', setThemeClass);
        tg.expand();
        tg.ready();
        console.log("Telegram WebApp SDK initialized and ready.");
    } catch (e) {
        console.error("Error initializing Telegram WebApp features:", e);
        try { tg.showAlert("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏ Telegram."); } catch (ignore) {}
    }

    // --- –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
    try {
        if (tg.initDataUnsafe && tg.initDataUnsafe.user) {
            const user = tg.initDataUnsafe.user;
            userInfoDiv.innerHTML = `–ó–∞–¥–∞—á–∏ –¥–ª—è: <strong>${user.first_name || 'User'}</strong>`;
        } else {
            userInfoDiv.innerHTML = '–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã';
        }
    } catch(e) { console.error("Error displaying user info:", e); userInfoDiv.innerHTML = '–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö'; }

    // --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á ---
    // TODO: –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–∞—Ç—å –∑–∞–¥–∞—á–∏ –∏–∑ localStorage –∏–ª–∏ –æ—Ç –±–æ—Ç–∞
    renderTasks(); // –ù–∞—á–∏–Ω–∞–µ–º —Å –ø—É—Å—Ç–æ–≥–æ (–∏–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ) —Å–ø–∏—Å–∫–∞

    // --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π ---
    try {
        // –ö–Ω–æ–ø–∫–∞ "–î–æ–±–∞–≤–∏—Ç—å" / "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å"
        addTaskBtn.addEventListener('click', addTask);
        console.log("Listener added to addTaskBtn");

        // Enter –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞
        newTaskInput.addEventListener('keypress', (event) => {
            if (event.key === 'Enter') {
                event.preventDefault();
                addTask();
            }
        });
        console.log("Listener added to newTaskInput");

        // –î–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∫–Ω–æ–ø–æ–∫ –≤ —Å–ø–∏—Å–∫–µ
        taskListUl.addEventListener('click', (event) => {
            const target = event.target;
            console.log("Click inside task list detected. Target:", target);

            const editButton = target.closest('.edit-btn');
            const deleteButton = target.closest('.delete-btn');

            if (editButton) {
                console.log("Edit button clicked.");
                const index = parseInt(editButton.dataset.index, 10);
                if (!isNaN(index)) {
                    startEditTask(index);
                } else {
                    console.error("Could not parse index from edit button:", editButton.dataset.index);
                }
                return;
            }

            if (deleteButton) {
                console.log("Delete button clicked.");
                const index = parseInt(deleteButton.dataset.index, 10);
                if (!isNaN(index)) {
                    deleteTask(index);
                } else {
                     console.error("Could not parse index from delete button:", deleteButton.dataset.index);
                }
                return;
            }
        });
        console.log("Event delegation listener added to taskListUl");


        // –ö–Ω–æ–ø–∫–∞ "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ó–∞–¥–∞—á–∏"
        sendTasksBtn.addEventListener('click', () => {
             console.log("sendTasksBtn clicked.");
             if (tasks.length === 0) {
                 tg.HapticFeedback.notificationOccurred('warning');
                 tg.showAlert("–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø—É—Å—Ç.");
                 return;
             }
             if (editingIndex !== null) {
                 cancelEdit(); // –û—Ç–º–µ–Ω—è–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
             }
             const dataToSend = JSON.stringify({
                 action: "send_task_list",
                 tasks: tasks,
                 timestamp: new Date().toISOString()
             });
             console.log("Sending data:", dataToSend);
             try {
                 tg.sendData(dataToSend);
                 tg.HapticFeedback.notificationOccurred('success');
                 tg.showAlert("–ó–∞–¥–∞—á–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!");
             } catch (e) {
                 console.error("Error sending data:", e);
                 tg.showAlert("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö.");
             }
        });
        console.log("Listener added to sendTasksBtn");

        // –ö–Ω–æ–ø–∫–∞ "–ó–∞–∫—Ä—ã—Ç—å"
        closeBtn.addEventListener('click', () => {
            console.log("closeBtn clicked.");
            if (editingIndex !== null) {
                cancelEdit(); // –û—Ç–º–µ–Ω—è–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º
            }
            try {
                tg.close();
            } catch (e) {
                console.error("Error closing WebApp:", e);
            }
        });
        console.log("Listener added to closeBtn");

    } catch (e) {
        console.error("Error adding event listeners:", e);
        tg.showAlert("–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞.");
    }
}

// --- –ó–∞–ø—É—Å–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ DOM ---
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializeApp);
} else {
    initializeApp();
}